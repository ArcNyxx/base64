.\" base64 - simple encoding library
.\" Copyright (C) 2022 ArcNyxx
.\" see LICENCE file for licensing information
.TH BASE64_DECODE_LEN 3 base64\-VERSION
.SH NAME
base64_decode_len \- get base64 decoded length
.SH SYNOPSIS
.EX
#include <base64.h>

#ifdef USE_EQUALS_SIGN_PADDING
size_t base64_decode_len(const char *string, const size_t length);
#else
size_t base64_decode_len(const size_t length);
#endif
.EE
.SH DESCRIPTION
.BR base64_decode_len (3)
returns the length to create a buffer for the output of
.BR base64_decode (3)
based on the
.I length
of the encoded string.  When the
.B USE_EQUALS_SIGN_PADDING
macro is defined, the
.I string
parameter must hold the full input string.
.SH RETURN VALUE
.BR base64_decode_len (3)
returns the length required to store a decoded string based on the length of
the input string in bytes.
.SH NOTES
.BR base64_decode_len (3)
has a different function prototype based on whether the
.B USE_EQUALS_SIGN_PADDING
macro is defined.
.SH EXAMPLE
Create an output buffer, decode data, then print the resulting data:
.PP
.EX
#include <base64.h>
#include <stdio.h>
#include <string.h>

int
main(void)
{
	static const char *data = "SGVsbG8gV29ybGQhCg";

	/* creates the output buffer of the exact size necessary */
	size_t len = base64_decode_len(strlen(data));
	char buffer[len + 1];
	buffer[len] = '\0';

	/* encodes then prints the decoded data */
	base64_decode(data, strlen(data), buffer);
	printf("%s", buffer);
}
.EE
.SH AUTHOR
Written by ArcNyxx.
.SH SEE ALSO
.BR base64_encode (3),\  base64_verify (3),\  base64_encode_len (3),
.BR base64_decode_len (3)
