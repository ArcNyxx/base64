.\" base64 - simple encoding library
.\" Copyright (C) 2022 ArcNyxx
.\" see LICENCE file for licensing information
.TH BASE64_DECODE 3 base64\-VERSION
.SH NAME
base64_decode \- base64 decode into arbitrary binary data
.SH SYNOPSIS
.EX
#include <base64.h>

void base64_decode(const char *restrict input, size_t length,
		char *restrict buffer);
.EE
.SH DESCRIPTION
.BR base64_decode (3)
decodes base64 data stored at
.IR input ,
.I length
bytes long, into arbitrary binary data, outputting the decoded data into
.IR buffer .
If the
.B USE_EQUALS_SIGN_PADDING
macro is defined, a number of equals signs ('=') may be permitted and ignored
at the end of
.IR input .
.SH RETURN VALUE
.BR base64_decode (3)
returns
.BR void ,
only writing the decoded binary data to
.IR buffer .
.SH NOTES
A NUL ('\\0') character is not automatically appended to the end of
.IR buffer .
String operations performed on the resulting data should be performed with
caution.
.PP
Callers must ensure that
.I buffer
is a pointer to a memory location large enough to store the data, as
.BR base64_decode (3)
does not check to ensure a buffer overflow does not occur.  Use of the
.BR base64_decode_len (3)
function is recommended to determine the length to allocate ahead of time.
.SH EXAMPLE
Create an output buffer, decode data, then print the resulting data:
.PP
.EX
#include <base64.h>
#include <stdio.h>
#include <string.h>

int
main(void)
{
	static const char *data = "SGVsbG8gV29ybGQhCg";

	/* creates the output buffer of the exact size necessary */
	size_t len = base64_decode_len(strlen(data));
	char buffer[len + 1];
	buffer[len] = '\\0';

	/* encodes then prints the decoded data */
	base64_decode(data, strlen(data), buffer);
	printf("%s", buffer);
}
.EE
.SH AUTHOR
Written by ArcNyxx.
.SH SEE ALSO
.BR base64_encode (3),\  base64_verify (3),\  base64_encode_len (3),
.BR base64_decode_len (3)
