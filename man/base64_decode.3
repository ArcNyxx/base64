.\" base64 - simple encoding library
.\" Copyright (C) 2022 FearlessDoggo21
.\" see LICENCE file for licensing information
.TH BASE64_DECODE 3 base64\-VERSION
.SH NAME
base64_decode \- base64 decode into arbitrary binary data
.SH SYNOPSIS
.EX
#include <base64.h>

void base64_decode(const char *restrict \fIinput\fP, size_t \fIlength\fP,
		char *restrict \fIbuffer\fP);
.EE
.SH DESCRIPTION
.BR base64_decode (3)
decodes base64 data, stored at
.IR input ,
with the
length of
.I length
bytes into arbitrary binary data, outputteing the decoded data into
.IR buffer ". "
If the
.I USE_EQUALS_SIGN_PADDING
macro is defined, a number of equals signs ('=') permitted as padding at the
end will be ignored.
.SH RETURN VALUE
.BR base64_decode (3)
writes the decoded binary data to
.IR buffer ". "
A NUL ('\\0') byte is not automatically written to the end of the buffer,
string operations performed on the resulting data will require a length of NUL
byte to be appended.
.SH NOTES
Callers must ensure that
.I buffer
is a pointer to a memory location large enough to store the data as
.BR base64_decode (3)
does not check to ensure a buffer overflow does not occur.  Use of the
.BR base64_decode_len (3)
function is recommended for determining the output length ahead of time.
.SH EXAMPLE
To create an output buffer, decode data into it, then print the decoded data:
.PP
.EX
#include <base64.h>
#include <stdio.h>
#include <string.h>

int
main(void)
{
	static const char *data = "SGVsbG8gV29ybGQhCg";

	/* creates the output buffer of the exact size necessary */
	size_t len = base64_decode_len(strlen(data));
	char buffer[len + 1];
	buffer[len] = '\\0';

	/* encodes then prints the decoded data */
	base64_decode(data, strlen(data), buffer);
	printf("%s", buffer);
}
.EE
.SH AUTHOR
Written by FearlessDoggo21.
.SH SEE ALSO
.BR base64_encode "(3), " base64_verify "(3), " base64_encode_len "(3), "
.BR base64_decode_len (3)
