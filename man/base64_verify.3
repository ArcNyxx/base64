.\" base64 - simple encoding library
.\" Copyright (C) 2022 ArcNyxx
.\" see LICENCE file for licensing information
.TH BASE64_VERIFY 3 base64\-VERSION
.SH NAME
base64_verify \- verify base64 encoded information
.SH SYNOPSIS
.EX
#include <base64.h>

bool base64_verify(const char *string, size_t length);
.EE
.SH DESCRIPTION
.BR base64_verify (3)
verifies whether
.IR string ,
.I length
bytes long, is base64 encoded data.
.SH RETURN VALUE
.BR base64_verify (3)
returns
.B true
if
.I string
is base64 encoded and
.B false
otherwise.
.SH NOTES
The
.I length
parameter does not include any NUL ('\\0') characters which may terminate the
data, only the possibly base64 encoded data itself.
.SH EXAMPLE
Verify base64 encoded data, create an output buffer, decode data, then print
the resulting data:
.EX
#include <base64.h>
#include <stdio.h>
#include <string.h>

int
main(void)
{
	static const char *data = "SGVsbG8gV29ybGQhCg";

	if (base64_verify(data, strlen(data))) {
		/* creates the output buffer of the exact size necessary */
		size_t len = base64_decode_len(strlen(data));
		char buffer[len + 1];
		buffer[len] = '\\0';

		/* encodes then prints the encoded data */
		base64_decode(data, strlen(data), buffer);
		printf("%s", buffer);
	} else {
		printf("\\"%s\\" is not base64 encoded.\\n", data);
	}
}
.EE
.SH AUTHOR
Written by ArcNyxx.
.SH SEE ALSO
.BR base64_encode (3),\  base64_decode (3),\  base64_encode_len (3),
.BR base64_decode_len (3)
